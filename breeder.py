from  __future__ import division

from gene import Gene
from geneCreator import GeneCreator
from manage_images import ManageImages
from model_factory import ModelFactory
from gene import Gene
from datas import Datas
from geneCreator import GeneCreator
from import_all import *

class Breeder:

	def getNewGeneration( self, old, n):
		geneCreator = GeneCreator()
		newGeneration = list()
		strongestN = 1
		if(n<1):
			strongestN = n
		reprods = math.ceil(n/2)
		randomAdds = 1 
		goods = self.takeGoods( old , strongestN )
		reproducible = self.takeGoods(old, reprods )
		#I want to maintain old goods in my genetic pools
		for i in range( 0, len(goods) ):
			newGeneration.append(goods[i])
			print( "old good" )
		#I want some sons generated by goods
		for i in range( 0 , (n - strongestN - randomAdds ) ):
			son = self.getSon( reproducible )
			newGeneration.append(son)
			print("sons")
		#I want also some randoms new borns
		for i in range( 0, randomAdds ):
			newGeneration.append( geneCreator.randomCreate() )
			print("random")
		return newGeneration

	def getSon( self, parents ):

		
		dri1 = random.randint(0, (len(parents) - 1 ) )
		dr1 = parents[dri1].dropout1

		dri2 = random.randint(0, (len(parents) - 1 ) )
		dr2 = parents[dri2].dropout2 
 

		l1i = random.randint(0, (len(parents) - 1 ) )
		l1 = parents[l1i].l1

		l2i = random.randint(0, (len(parents) - 1 ) )
		l2 = parents[l2i].l2 

		lri = random.randint(0, (len(parents) - 1 ) )
		lr = parents[lri].lr 

		son = Gene( lr,	dr1, dr2, l1, l2 )
		
		return son	

	def run(self, generation, datas):
		runnedGeneration = list()

		X_train, X_valid, X_angle_train, X_angle_valid, y_train, y_valid = datas.X_train, datas.X_valid, datas.X_angle_train, datas.X_angle_valid, datas.y_train, datas.y_valid

		
		for i in range( 0 , len(generation)):
			
			thisGene = generation[i]
			model_factory = ModelFactory( )
			model = model_factory.getModel( thisGene )
			
			result = model_factory.run( datas, model, 0 )
			thisGene.setFitnessLevel( result ) 
			'''
			thisGene.level = random.random()
			print("\n\nrunning gene:")
			thisGene.toStr()
			'''

			runnedGeneration.append(thisGene)

		return runnedGeneration	

	def getFirstGeneration( self, n ):
		genes = list()
		creator = GeneCreator()
		for i in range( 0 , n):
			g = creator.randomCreate()
			genes.append(g)
		return genes

	def orderGenes( self , genes ):
		result = []
		genesSet = set(genes)
		genes = list( genesSet ) # no doubles!
		#for i in range( 0, len(genes) ):
		#	print( "before: " + str(genes[i].level) )		
		
		result = sorted(genes, key=lambda x: x.level, reverse=False)
		#for i in range( 0, len(result) ):
		#	print( "after: " + str(result[i].level) )		
		
		return result

	def takeGoods( self, genes, n ):
		goods = []

		for i in range(0, len(genes) ):
			g = genes[i]
			goods.append(g)
			goods = self.orderGenes( goods )
			if( len( goods ) > n):
				goods = goods[ 0 : n ]

		#for i in range( 0, len(goods) ):
		#	print( "goods: " + str( goods[i].level ) )		
		return goods		    

	def takeBest( self, genes ):

		minLevel = 999 #level of error
		bestGene = None

		for i in range(0, len(genes) ):
			g = genes[i]
			if( g.level < minLevel ):
				bestGene = g
				minLevel = g.level

		return bestGene		